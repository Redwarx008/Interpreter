using System.Text;

namespace SourceGenerator
{
    internal class Program
    {
        private static StringBuilder _codeSB = new StringBuilder();

        private static string _baseName = "Expr";

        private static List<string> _dsp = new List<string>()
        {
            "Binary   : Expr left, Token loxOperator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Unary    : Token loxOperator, Expr right"
        };
        private static void DefineVisitor(string baseName, List<string> types)
        {
            _codeSB.Append($@"
        internal interface Visitor<R>
        {{
");
            for(int i = 0; i < types.Count; i++)
            {
                string typeName = types[i].Split(':')[0].Trim();
                _codeSB.Append($@"
            R Visit{typeName}{baseName}({typeName} {baseName.ToLower()});
");
            }

            _codeSB.Append($@"
        }}
");
        }
        private static void DefineType(string className, string fieldList)
        {
            _codeSB.Append($@"
        internal class {className} : {_baseName}
        {{
            // Constructor.
            public {className} ({fieldList})
            {{
        ");
            // Store parameters in fields.
            string[] fields = fieldList.Split(',');
            foreach (string field in fields)
            {
                string name = field.Split(' ', StringSplitOptions.RemoveEmptyEntries)[1];
                _codeSB.Append($@"
                _{name} = {name};
        ");
            }
            _codeSB.Append($@"
            }}
        ");
            // Visitor pattern.
            _codeSB.Append($@"
            internal override R Accept<R>(Visitor<R> visitor)
            {{
                return visitor.Visit{className}{_baseName}(this);
            }}");
            // Fields.
            foreach (string field in fields)
            {
                string name = field.Split(' ', StringSplitOptions.RemoveEmptyEntries)[1];
                string type = field.Split(' ', StringSplitOptions.RemoveEmptyEntries)[0];
                _codeSB.Append($@"
            internal {type} _{name};
        ");
            }

            _codeSB.Append($@"
        }}
        ");
        }
        private static void DefineAst()
        {
            _codeSB.Append($@"// <auto-generated/>
using System;
//using System.Collections.Generic;
using Interpreter;
namespace LoxGenerated
{{  
    public abstract class {_baseName}
    {{
");
            DefineVisitor(_baseName, _dsp);
            for (int i = 0; i < _dsp.Count; i++)
            {
                string className = _dsp[i].Split(':')[0].Trim();
                string fields = _dsp[i].Split(':')[1];
                DefineType(className, fields);
            }

            _codeSB.Append($@"
        internal abstract R Accept<R>(Visitor<R> visitor);
    }}
}}
");
        }
        static void Main(string[] args)
        {
            DefineAst();
            using var writeStream =  File.CreateText("generated.cs");
            writeStream.Write(_codeSB.ToString());
        }
    }
}